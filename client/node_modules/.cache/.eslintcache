[{"/Users/gaiko/Code/newCode/finalchemy/client/src/index.js":"1","/Users/gaiko/Code/newCode/finalchemy/client/src/App.js":"2","/Users/gaiko/Code/newCode/finalchemy/client/src/components/auth/Auth.jsx":"3","/Users/gaiko/Code/newCode/finalchemy/client/src/components/navbar/Navbar.jsx":"4","/Users/gaiko/Code/newCode/finalchemy/client/src/components/binance/double/Double.jsx":"5","/Users/gaiko/Code/newCode/finalchemy/client/src/components/binance/tripple/Tripple.jsx":"6","/Users/gaiko/Code/newCode/finalchemy/client/src/components/header/Header.jsx":"7","/Users/gaiko/Code/newCode/finalchemy/client/src/config.js":"8"},{"size":254,"mtime":1667941780390,"results":"9","hashOfConfig":"10"},{"size":726,"mtime":1668120730693,"results":"11","hashOfConfig":"10"},{"size":1755,"mtime":1668177568821,"results":"12","hashOfConfig":"10"},{"size":3322,"mtime":1668177598182,"results":"13","hashOfConfig":"10"},{"size":10107,"mtime":1668177556339,"results":"14","hashOfConfig":"10"},{"size":10865,"mtime":1668176522118,"results":"15","hashOfConfig":"10"},{"size":854,"mtime":1668112786409,"results":"16","hashOfConfig":"10"},{"size":42,"mtime":1668166924551,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dd0mk1",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/gaiko/Code/newCode/finalchemy/client/src/index.js",[],[],"/Users/gaiko/Code/newCode/finalchemy/client/src/App.js",[],[],"/Users/gaiko/Code/newCode/finalchemy/client/src/components/auth/Auth.jsx",["45"],[],"/Users/gaiko/Code/newCode/finalchemy/client/src/components/navbar/Navbar.jsx",["46"],[],"/Users/gaiko/Code/newCode/finalchemy/client/src/components/binance/double/Double.jsx",["47","48","49","50"],[],"/Users/gaiko/Code/newCode/finalchemy/client/src/components/binance/tripple/Tripple.jsx",["51","52","53","54"],[],"import React, { useState, useRef } from \"react\"\nimport axios from 'axios'\nimport link from \"../../../svg/link.svg\"\nimport info from \"../../../svg/info.svg\"\nimport loadingSvg from \"../../../svg/loadingSvg.svg\"\nimport './Tripple.css'\nimport Header from \"../../header/Header\";\nimport {Link, useNavigate} from \"react-router-dom\";\nimport domain from '../../../config'\n\nfunction Tripple() {\n    const [company, setCompany] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    const [bankList, setBankList] = useState([\"TinkoffNew\", \"RosBankNew\", \"RaiffeisenBank\", \"QIWI\"])\n    const [symbolList, setSymbolList] = useState([\"USDT\", \"BUSD\", \"BNB\", \"ETH\", \"BTC\"])\n\n    const inputRef = useRef(null);\n\n    const [updated, setUpdated] = useState('');\n\n    const handleClick = () => {\n        setUpdated(inputRef.current.value);\n    };\n\n    const navigate = useNavigate()\n    const token = localStorage.getItem(\"token\")\n    console.log(token)\n    if (token === null){\n        navigate('/')\n    }\n\n    React.useEffect(() => {\n        const fetchData = async(bankList) => {\n            try{\n                const {data} = await axios.post('/api/get_triple_bundle/', {\n                    \"BANKS_LIST\": [\"TinkoffNew\", \"RosBankNew\", \"QIWI\"],\n                    \"ASSET_LIST\": [\"USDT\", \"BTC\", \"BNB\"],\n                    \"AMOUNT\": 10000\n                })\n\n                setCompany(data)\n\n            } catch(error) {\n                console.log(error)\n            }\n\n            setLoading(false)\n        }\n        fetchData()\n    }, [])\n\n    const fetchData = async(bankList, symbolList) => {\n        handleClick()\n        setLoading(true)\n        try{\n            const {data} = await axios.post('/api/get_triple_bundle/', {\n                \"BANKS_LIST\": bankList,\n                \"ASSET_LIST\": symbolList,\n                \"AMOUNT\": updated\n            })\n\n            setCompany(data)\n\n        } catch(error) {\n            console.log(error)\n        }\n\n        setLoading(false)\n    }\n\n    const addBankList = (bankName) => {\n        let index = bankList.indexOf(bankName)\n        if (index === -1){\n            setBankList(prev => [...prev, bankName])\n            console.log(bankList)\n        }\n        else {\n            setBankList(prev => prev.splice(0, index))\n            console.log(bankList)\n        }\n    }\n\n    const clearBankList = () => {\n        setBankList([])\n        setSymbolList([])\n    }\n\n    const addSymbolList = (symbolName) => {\n        let index = symbolList.indexOf(symbolName)\n        if (index === -1){\n            setSymbolList(prev => [...prev, symbolName])\n            console.log(symbolList)\n        }\n        else {\n            setBankList(prev => prev.splice(0, index))\n            console.log(symbolList)\n        }\n    }\n\n\n    return (\n        <div>\n            <Header />\n            <div className='menuLine'></div>\n            <div className='logoBox'>\n                <Link to={'/home'}><div className='bigLogoText'>Финансовая алхимия</div></Link>\n                <div className='littleLogoText'>Binance: Тройные связки</div>\n                {loading && <div className='loadingText'><img src={loadingSvg}/></div>}\n            </div>\n            <div className='settingsBar'>\n                <div>\n                    <div className='depositBox'>\n                        <input className='depositInput' placeholder=\"10000\" ref={inputRef} type=\"num\" id=\"message\" name=\"message\" />\n                        <div className='lowTitle'>Введите ваш депозит *по умолчанию 10.000</div>\n                        <div className='buttonBox'>\n                            <button className='acceptButton' onClick={() => fetchData(bankList, symbolList)}>Применить</button>\n                            <button className='declineButton' onClick={() => clearBankList()}>Очистить</button>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className='settingsBox'>\n                        <div className='settingTagsBox'>\n                            <button className='passiveBank' onClick={() => addBankList(\"TinkoffNew\")}>Тинькофф</button>\n                            <button className='passiveBank' onClick={() => addBankList(\"RosBankNew\")}>Росбанк</button>\n                            <button className='passiveBank' onClick={() => addBankList(\"RaiffeisenBank\")}>Райффайзен</button>\n                            <button className='passiveBank' onClick={() => addBankList(\"QIWI\")}>QIWI</button>\n                        </div>\n                        <div className='lowTitle'>Выберите необходимые способы оплаты  *по умолчанию выбраны все </div>\n                        <div className='filterBox'>\n                            {bankList.map(bank => (\n                                <div className='activeBank'>{bank}</div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n\n                <div>\n                    <div className='settingsBox'>\n                        <div className='settingTagsBox'>\n                            <button className='passiveBank' onClick={() => addSymbolList(\"USDT\")}>USDT</button>\n                            <button className='passiveBank' onClick={() => addSymbolList(\"BUSD\")}>BUSD</button>\n                            <button className='passiveBank' onClick={() => addSymbolList(\"BNB\")}>BNB</button>\n                            <button className='passiveBank' onClick={() => addSymbolList(\"ETH\")}>ETH</button>\n                            <button className='passiveBank' onClick={() => addSymbolList(\"BTC\")}>BTC</button>\n                        </div>\n                        <div className='lowTitle'>Выберите препочитаемые для торговли валюты  *по умолчанию выбраны все</div>\n                        <div className='filterBox'>\n                            {symbolList.map(symbol => (\n                                <div className='activeBank'>{symbol}</div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div>\n                <div className='tableTitles'>\n                    <div className='boyBoxHeader'>ПОКУПАЕМ НА P2P</div>\n                    <div className='midBoxHeader'>ОБМЕНИВАЕМ НА SPOT</div>\n                    <div className='boyBoxHeader'>ПРОДАЕМ НА P2P</div>\n                    <div className='resultBoxHeader'>РЕЗУЛЬТАТ</div>\n                </div>\n                <div className='menuLine'></div>\n            </div>\n\n            <div className='bundleList'>\n                <>\n                    {company.map(company => (\n                        <>\n                            <div className='buyLine'>\n                                <div className='buyBox'>\n                                    <div className='priceBox'>\n                                        <div className='priceText'>{company.buy_order.order.price}</div>\n                                        <div className='tinyText'>{company.buy_order.order.asset}({company.buy_order.order.bank})</div>\n                                        <div className='tinyText'><br/>В фиате: {company.buy_order.order.suply} {company.buy_order.order.asset}</div>\n                                        <div className='tinyText'>Лимиты: {company.buy_order.order.min} - {company.buy_order.order.max}</div>\n                                    </div>\n                                    <div>\n                                        <div className='linkBox' >\n                                            <img src={link} className='nicknameLogo'/>\n                                            <a className='boldText' href={company.buy_order.user.link} target=\"_blank\" rel=\"noopener noreferrer\" >{company.buy_order.user.nick}</a>\n                                        </div>\n                                        <div className='tinyText'>Количество следок: {company.buy_order.user.orders}({company.buy_order.user.rate}%)</div>\n                                    </div>\n                                </div>\n\n                                <div className='midBox'>\n                                    <div className='priceText'>{company.other_info.middle_price}</div>\n                                    <div className='boldText'>{company.buy_order.order.asset} - {company.sell_order.order.asset}</div>\n                                    <div className='tinyText'> <br/> <img src={info} alt=\"\" className='infoLogo'/> Обмениваем купленную {company.buy_order.order.asset} на {company.sell_order.order.asset}  <br/>на спотовом рынке</div>\n                                </div>\n\n                                <div className='buyBox'>\n                                    <div className='priceBox'>\n                                        <div className='priceText'>{company.sell_order.order.price}</div>\n                                        <div className='tinyText'>{company.sell_order.order.asset}({company.sell_order.order.bank})</div>\n                                        <div className='tinyText'><br/>В фиате: {company.sell_order.order.suply} {company.sell_order.order.asset}</div>\n                                        <div className='tinyText'>Лимиты: {company.sell_order.order.min} - {company.sell_order.order.max}</div>\n                                    </div>\n                                    <div>\n                                        <div className='linkBox' >\n                                            <img src={link} className='nicknameLogo'/>\n                                            <a className='boldText' href={company.sell_order.user.link} target=\"_blank\" rel=\"noopener noreferrer\" >{company.sell_order.user.nick}</a>\n                                        </div>\n                                        <div className='tinyText'>Количество следок: {company.sell_order.user.orders}({company.sell_order.user.rate}%)</div>\n                                    </div>\n                                </div>\n                                <div className='resultBox'>\n                                    <div className='priceText'>+{company.other_info.take_money_proc}%</div>\n                                    <div className='tinyText'>Прибыль: {company.other_info.take_money} RUB</div>\n                                </div>\n                            </div>\n                        </>\n                    ))}\n                </>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Tripple;\n","/Users/gaiko/Code/newCode/finalchemy/client/src/components/header/Header.jsx",[],[],[],"/Users/gaiko/Code/newCode/finalchemy/client/src/config.js",[],[],[],{"ruleId":"55","severity":1,"message":"56","line":5,"column":8,"nodeType":"57","messageId":"58","endLine":5,"endColumn":14},{"ruleId":"59","severity":1,"message":"60","line":56,"column":74,"nodeType":"61","endLine":56,"endColumn":97},{"ruleId":"55","severity":1,"message":"62","line":4,"column":8,"nodeType":"57","messageId":"58","endLine":4,"endColumn":12},{"ruleId":"59","severity":1,"message":"60","line":110,"column":58,"nodeType":"61","endLine":110,"endColumn":81},{"ruleId":"59","severity":1,"message":"60","line":181,"column":41,"nodeType":"61","endLine":181,"endColumn":83},{"ruleId":"59","severity":1,"message":"60","line":198,"column":41,"nodeType":"61","endLine":198,"endColumn":83},{"ruleId":"55","severity":1,"message":"56","line":9,"column":8,"nodeType":"57","messageId":"58","endLine":9,"endColumn":14},{"ruleId":"59","severity":1,"message":"60","line":109,"column":58,"nodeType":"61","endLine":109,"endColumn":81},{"ruleId":"59","severity":1,"message":"60","line":182,"column":45,"nodeType":"61","endLine":182,"endColumn":87},{"ruleId":"59","severity":1,"message":"60","line":204,"column":45,"nodeType":"61","endLine":204,"endColumn":87},"no-unused-vars","'domain' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'info' is defined but never used."]